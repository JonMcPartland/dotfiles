#!/usr/bin/env bash

function _generateSAN {
  local DOMAINS=(${@})

  local SAN="";
  for (( i = ${#DOMAINS[@]} - 1; i >= 0; i-- )); do
    SAN="DNS:${DOMAINS[i]},${SAN}";

    # if only domain wildcards, add apex too
    if [[ ${DOMAINS[i]} == "*."* ]]; then
      # TMP=$(echo "${DOMAINS[i]//\*\./}");
      TMP=$(echo "${DOMAINS[i]}" | sed 's/\*\.//g');
      SAN="DNS:${TMP},${SAN}";
    fi
  done
  SAN="${SAN%?}";

  echo "${SAN}";
}

function _createPrivateKey {
  local BASEDIR="${HOME}/.ssl/ca/intermediate";

  /usr/local/opt/openssl/bin/openssl genrsa -out "${BASEDIR}/private/${1}.key.pem" 4096 2> /dev/null;
  chmod 400 "${BASEDIR}/private/${1}.key.pem" 2> /dev/null;

  _fancyLine "OK" "Private key created.";
}

function _createCSRRequest {
  local BASEDIR="${HOME}/.ssl/ca/intermediate";

  AltName="${2}" \
    /usr/local/opt/openssl/bin/openssl req \
      -new -sha256 \
      -config "${BASEDIR}/openssl.cnf" \
      -subj "/C=GB/ST=England/L=Middlesbrough/O=Big Bite Creative Ltd/OU=Jon McPartland/CN=${1}" \
      -key "${BASEDIR}/private/${1}.key.pem" \
      -out "${BASEDIR}/csr/${1}.csr.pem" \
  2> /dev/null;

  _fancyLine "OK" "Certificate Signing Request created.";
}

function _createCertificate {
  local BASEDIR="${HOME}/.ssl/ca/intermediate";

  yes | sudo AltName="${2}" \
    /usr/local/opt/openssl/bin/openssl ca \
      -config "${BASEDIR}/openssl.cnf" \
      -extensions server_cert \
      -days 1825 \
      -notext \
      -md sha256 \
      -in "${BASEDIR}/csr/${1}.csr.pem" \
      -out "${BASEDIR}/certs/${1}.cert.pem" \
  2> /dev/null;

  chmod 444 "${BASEDIR}/certs/${1}.cert.pem" 2> /dev/null;

  # verify
  # openssl x509 -noout -text -in "${BASEDIR}/certs/domain-name-tld.cert.pem"
  VERIFIED=$(/usr/local/opt/openssl/bin/openssl verify \
    -CAfile \
    "${BASEDIR}/certs/ca-chain.cert.pem" \
    "${BASEDIR}/certs/${1}.cert.pem" | awk '{print $2}');

  if [[ "${VERIFIED}" == "OK" ]]; then
    _fancyLine "OK" "Cert: ${BASEDIR}/certs/${1}.cert.pem";
    _fancyLine "OK" "Key:  ${BASEDIR}/private/${1}.key.pem";
  else
    _fancyLine "ERROR" "Signed Certificate invalid. Please retry.";

    return 1;
  fi
}

function newSSL {
  # request sudo credentials
  sudo -v

  local BASEDIR="${HOME}/.ssl/ca/intermediate";
  local CERTNAME="${1,,}";
  local CERTNAME="${CERTNAME// /-}";

  read -r SANAMES <<< $(_generateSAN "${@:2}" 2> /dev/null)

  _createPrivateKey "${CERTNAME}";
  _createCSRRequest "${CERTNAME}" "${SANAMES}";
  _createCertificate "${CERTNAME}" "${SANAMES}";
}


function _regenerateCRL {
  local BASEDIR="${HOME}/.ssl/ca/intermediate";

  /usr/local/opt/openssl/bin/openssl ca \
    -gencrl \
    -config "${BASEDIR}/openssl.conf" \
    -out "${BASEDIR}/crl/intermediate.crl.pem" \
  2> /dev/null;

  _fancyLine "OK" "Certificate revocation list updated.";
}

function revokeSSL {
  # request sudo credentials
  sudo -v

  local BASEDIR="${HOME}/.ssl/ca/intermediate";
  CERTNAME="${1,,}";
  CERTNAME="${CERTNAME// /-}";

  read SANAMES <<< $(_generateSAN "${1,,}${@:2}" 2> /dev/null)

  AltName="${SANAMES}"\
  /usr/local/opt/openssl/bin/openssl ca \
    -config "${BASEDIR}/openssl.conf" \
    -revoke "${BASEDIR}/certs/${CERTNAME}.cert.pem" \
  2> /dev/null;

  _regenerateCRL;

  sudo rm "${BASEDIR}/certs/${CERTNAME}.cert.pem";
  sudo rm "${BASEDIR}/csr/${CERTNAME}.csr.pem";
  sudo rm "${BASEDIR}/private/${CERTNAME}.key.pem";

  _fancyLine "OK" "Certificate for ${CERTNAME} revoked.";
}
